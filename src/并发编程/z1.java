package 并发编程;

public class z1 {

	/**
	 * 并发
	 * 
	 * 
	 * 1.1上下文切换
	 * 	单核处理器支持的多线程，CPU根每个线程分配时间片，时间片是分配给线程的时间，因为时间片很短，所以cpu通过不停地切换线程执行，让我们感觉是多个线程
	 * 	同时执行，时间片一般是及时毫秒
	 * 	CPU通过时间片分配算法来执行任务，当前任务执行一个时间片后，会切换到下一个任务，切换之前会保存上一个任务的状态，下回切到这个任务时候，可以加载
	 * 	这个任务的状态，所以任务从保存到在加载的过程就是一次上下文切换
	 * 
	 * 	上下文切换会影响多线程的执行效率
	 * 
	 * 
	 * 
	 * 1.1.3 如何减少上下文切换
	 * 		无锁并发编程，cas，使用最少线程和使用协程
	 * 		无视并发编程，多线程在竞争锁的时候，会引起上下文切换，再多线程处理数据时，可以用一些办法避免使用锁，如将数据idhash 取模，分段，不同线程
	 * 		处理不同的数据。
	 * 		协程：在单线程实现多任务调度。并在单线程维持多个任务的切换
	 * 
	 * 1.2死锁
	 * 	避免死锁的方法：
	 * 	避免一个线程同时获取多个锁
	 * 	避免一个线程在锁内同时占用多个资源，尽量保证一个锁只占用一个资源
	 * 	尝试使用定时锁，使用tryLock（timeout）来代替使用内部锁机制
	 * 	对于数据库锁，枷锁和解锁必须在同一个数据库连接中，。否则会出现解锁失败的情况
	 * 	
	 * 1.3资源限制的挑战
	 * 	
	 */
}
